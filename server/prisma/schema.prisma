generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clients {
  clientId String @id
  name   String
  email  String @unique
  phone  String
  address String
  sales   Sales[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Users {
  userId String @id
  name   String
  email  String @unique
  password String
  role   Roles            @relation(fields: [roleId], references: [roleId])
  roleId Int
  status Status           @relation(fields: [statusId], references: [statusId])
  statusId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  roleId      Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  users       Users[]
}

model Status {
  statusId    Int          @id
  name        String       @unique
  description String?
  users       Users[]
  products    Products[]
}

model Products {
  productId     String      @id
  categoryId    String
  supplierId    String
  statusId      Int
  name          String
  price         Float
  rating        Float?
  stockQuantity Int
  stockMinimum  Int
  image_url     String?
  Sales         Sales[]
  Purchases     Purchases[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  category      Category @relation(fields: [categoryId], references: [categoryId])
  supplier      Suppliers @relation(fields: [supplierId], references: [supplierId])
  status        Status @relation(fields: [statusId], references: [statusId])
}

model Category {
  categoryId    String    @id
  name          String
  description   String
  Products      Products[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Suppliers {
  supplierId    String    @id
  name          String
  email         String    @unique
  phone         String
  address       String
  Products      Products[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Sales {
  saleId      String   @id
  productId   String
  clientId    String
  timestamp   DateTime @default(now())
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId])
  client      Clients @relation(fields: [clientId], references: [clientId])
}

model Purchases {
  purchaseId String   @id
  productId  String
  timestamp  DateTime @default(now())
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId])
}

model Expenses {
  expenseId String   @id
  expenseByCategoryId String
  description String
  amount    Float
  timestamp DateTime @default(now())
  expenseByCategory ExpenseByCategory @relation(fields: [expenseByCategoryId], references: [expenseByCategoryId])
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime @default(now())
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime @default(now())
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  changePercentage  Float?
  date              DateTime @default(now())
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  name String
  description String
  Expenses  Expenses[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}